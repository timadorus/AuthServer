<?xml version="1.0" encoding="UTF-8"?>
<!-- Ant build file -->
<project default="build" name="TimadorusAuthServer" basedir="."
	xmlns:ivy="antlib:org.apache.ivy.ant">
  <!-- Set up properties -->
  <property name="build.dir" value="${basedir}/bin" />
  <property name="src.dir" value="${basedir}/src" />
  <property name="test-src.dir" value="${basedir}/test-src" />
  <property name="lib.dir" value="${basedir}/lib" />
  <property name="doc.dir" value="${basedir}/doc" />
  <property name="initscript.dir" value="${basedir}/etc/init.d" />
  <property name="etc.dir" value="${basedir}/etc" />
  <property name="release.dir" value="${basedir}/release" />
  <property name="example.dir" value="${release.dir}/example" />
  <property name="ivy.resolve" value="${basedir}/resources/ivy.xml" />
  <property name="ivy.settings" value="${basedir}/resources/ivysettings.xml" />
  <property name="pub.version" value="2.0" />
  <property name="pub.status" value="integration" />
  <property name="pub.release.resolver" value="timadorus-release" />
  
  <path id="classpath">
    <fileset dir="${lib.dir}" includes="**/*.jar" />
  </path>
	
	<!-- ================================= 
	       target: resolve
	       
	       Resolves the code dependencies using ivy.
	     ================================= -->
	<target name="resolve" description="--> Retrieve dependencies with ivy">
		<ivy:settings file="${ivy.settings}" />
		<ivy:resolve file="${ivy.resolve}" />
		<ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" sync="true" />
	</target>
  
  <!-- ================================= 
          target: clean
          
          Cleans the build and release directories.
       ================================= -->
  <target name="clean" description="--> Delete build and release directories">
    <delete dir="${build.dir}" />
    <delete dir="${release.dir}" />
  </target>
  
  <!-- ================================= 
          target: compile
          
          Compiles the code.
       ================================= -->
  <target name="compile" description="--> Compiling the code">
    <mkdir dir="${build.dir}" />
    <javac srcdir="${src.dir}" destdir="${build.dir}" classpathref="classpath" includeantruntime="false">
      <compilerarg line="-encoding utf-8"/>
    </javac>
    <javac srcdir="${test-src.dir}" destdir="${build.dir}" classpathref="classpath" includeantruntime="false">
      <compilerarg line="-encoding utf-8"/>
    </javac>
  </target>
  
  <!-- ================================= 
          target: release
          
          Creates realease directory and copies data in to correct folders.
       ================================= -->
  <target name="release" description="--> Generating release directory">
    <mkdir dir="${release.dir}" />
    <copy todir="${release.dir}">
      <fileset dir="${src.dir}/org/timadorus/auth/server">
        <include name="server-config.xml" />
      	<include name="logging.properties" />
      </fileset>
    </copy>
    <mkdir dir="${example.dir}" />
  	<mkdir dir="${release.dir}/lib" />
  	<copy todir="${release.dir}/lib">
  	  <fileset dir="${lib.dir}"/>
  	</copy>
  	<mkdir dir="${release.dir}/doc" />
  	<copy todir="${release.dir}/doc">
  	  <fileset dir="${doc.dir}"/>
  	</copy>
  	<mkdir dir="${release.dir}/etc" />
  	<copy todir="${release.dir}/etc">
  		<fileset dir="${etc.dir}" />
  	</copy>
  </target>

  <!-- ================================= 
          target: initscript

	  	  Copies the server control script to output folder.
       ================================= -->
  <target name="initscript" description="--> Copying server control script to release folder" depends="release">
    <copy todir="${release.dir}">
      <fileset dir="${initscript.dir}">
        <include name="authserver.sh" />
      </fileset>
    </copy>
  </target>
  
  <!-- ================================= 
          target: jar-server
          
          Compiles the server code.
       ================================= -->

  <target name="jar-server" description="--> Compiling server" depends="tests">
  	<!-- Create the value to use for the Class-Path entry in the Jar's manifest -->
    <manifestclasspath property="manifest_cp" jarfile="auth-server.jar">
         <classpath refid="classpath" />
     </manifestclasspath>
    <jar destfile="${release.dir}/auth-server.jar" basedir="${build.dir}">
      <manifest>
        <attribute name="Main-Class" value="org.timadorus.auth.server.Program" />
        <attribute name="Class-Path" value="${manifest_cp}"/>
      </manifest>
      <include name="org/timadorus/auth/server/*.class" />
      <include name="org/timadorus/auth/util/*.class" />
    </jar>
  </target>
  
  <!-- ================================= 
          target: jar-client-lib
          
          Compiles the client code.
       ================================= -->
  <target name="jar-client-lib" description="--> Compiling client" depends="tests">
    <jar destfile="${release.dir}/auth-client-lib.jar" basedir="${build.dir}">
      <!-- client-lib uses the Base64-decoder of apach commons codec -->
      <zipgroupfileset dir="${lib.dir}/default" includes="commons-codec-*.jar,gson-2.2.4.jar" />
      <include name="org/timadorus/auth/client/*.class" />
      <include name="org/timadorus/auth/util/*.class" />
    </jar>
  </target>
  
  <!-- ================================= 
          target: jar-example-client
          
          Compiles the example client code.
       ================================= -->
  <target name="jar-example-client" depends="tests">
    <jar destfile="${example.dir}/example-client.jar" basedir="${build.dir}">
      <zipgroupfileset dir="${lib.dir}/default" includes="commons-codec-*.jar,gson-2.2.4.jar" />
      <include name="org/timadorus/auth/client/*.class" />
      <include name="org/timadorus/auth/util/*.class" />
      <include name="org/timadorus/auth/example/client/*.class" />
      <manifest>
        <attribute name="Main-Class" value="org.timadorus.auth.example.client.Program" />
      </manifest>
    </jar>
  </target>
  
  <!-- ================================= 
          target: jar-example-gameserver
          
          Compiles the example gameserver code.
       ================================= -->
  <target name="jar-example-gameserver" depends="tests">
    <jar destfile="${example.dir}/example-gameserver.jar" basedir="${build.dir}">
      <zipgroupfileset dir="${lib.dir}/default" includes="commons-codec-*.jar" />
      <include name="org/timadorus/auth/util/*.class" />
      <include name="org/timadorus/auth/example/gameserver/*.class" />
      <manifest>
        <attribute name="Main-Class" value="org.timadorus.auth.example.gameserver.Program" />
      </manifest>
    </jar>
  </target>
  
  <!-- ================================= 
          target: jar
          
          Compiles the server code and the example applications.
       ================================= -->
  <target name="jar" description="--> Compiling code" depends="release, jar-server, jar-client-lib,
      jar-example-client, jar-example-gameserver" />
  
  <!-- ================================= 
          target: tests
          
          Compiles and runs unit tests.
       ================================= -->
  <target name="tests" description="--> Preparing tests" depends="compile">
    <junit fork="yes" printsummary="yes" haltonfailure="yes">
      <classpath>
        <path refid="classpath" />
        <pathelement location="${build.dir}" />
      </classpath>
      <formatter type="plain" usefile="false" />
      <batchtest fork="yes">
        <fileset dir="${test-src.dir}">
          <include name="**/*.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>
  
  <!-- ================================= 
         target: publish-to-repo
         
         Pushes the JAR files to the Timadorus Artifactory Repository.
       ================================= -->
  <target name="publish-to-repo" description="--> Publish to repository" depends="resolve,jar">
  	<ivy:publish pubrevision="${pub.version}" status="${pub.status}" resolver="${pub.release.resolver}" overwrite="true">
  		<artifacts pattern="${release.dir}/[artifact].[ext]" />
  	</ivy:publish>
  </target>

  <!-- ================================= 
          target: build
          
          Cleans, resolves dependencies, builds and copies the init script to output folder.
       ================================= -->
  <target name="build" description="--> Starting build" depends="clean,resolve,jar,initscript" />
</project>
