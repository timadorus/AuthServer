<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<!-- Auth-server configuration File. -->
<properties>
  <!-- ************************************* -->
  <!-- ********* NETWORK SETTINGS ********** -->
  <!-- ************************************* -->
  <!-- The port on which the server is listening. The default port is 50001. -->
  <entry key="listenPort">50001</entry>
  <!-- The network interface to bind the server to. If this is omitted, the
    server will listen for connections on all of its interfaces. -->
<!--  <entry key="networkInterface">192.168.247.1</entry>  -->
  
  <!-- ************************************* -->
  <!-- ********* DATABASE SETTINGS ********* -->
  <!-- ************************************* -->
  <!-- The classname of the database driver to use.
    Examples:
      For embedded Derby:    org.apache.derby.jdbc.EmbeddedDriver
      For traditional Derby: org.apache.derby.jdbc.ClientDriver
   -->
  <entry key="dbDriverClassName">org.apache.derby.jdbc.EmbeddedDriver</entry>
  <!-- The connection-string for connecting to the auth database. Note that
     the & character must be encoded as &amp;
  -->
  <entry key="dbConnectionString">
<!--   jdbc:derby://localhost/timadorus;create=true;user=authserver;password=geheim  -->
     jdbc:derby:/as-data/timadorus_user_db;create=true;
  </entry>
  <!-- The prefix, if any, of the database tables. -->
  <!--<entry key="dbTablePrefix">tm_</entry>-->
  
  <!-- ************************************* -->
  <!-- ********* KEYSTORE SETTINGS ********* -->
  <!-- ************************************* -->
  <!-- The file containing the key-store to use for the SSL server; A
     key-store can be generated with the 'keytool' utility which is
     included with Java.
  -->
  <entry key="keyStoreFile">
    ./etc/server
  </entry>
  <!-- The password for the key-store. -->
  <entry key="keyStorePassword">123456</entry>
  <!-- The file containing the trust-store to use for the SSL server; A
     trust-store can be generated with the 'keytool' utility which is
     included with Java.
  -->
  <entry key="trustStoreFile">
    ./etc/cacerts
  </entry>
  
  <!-- ************************************* -->
  <!-- *********** OTHER SETTINGS ********** -->
  <!-- ************************************* -->
  <!-- The secret-key that is shared with the gameserver for encrypting
     and decrypting auth-tokens.
   -->
  <entry key="sharedSecretKey">
    SuperGeheim
  </entry>
  <!-- The path to the logging.properties file. If this setting is omitted,
    the logging.properties file path can also be set by specifying it as a
    system property (-Djava.util.logging.config.file) when starting the
    application. -->
  <entry key="loggingFile">
    /as-data/logging.properties
  </entry>
  <!-- Determines whether the server should run in interactive mode. In
       interactive mode, a simple command-interpreter is available for
       controlling the auth-server from the command-line. When running the
       server as a service, interactive mode should be disabled. -->
  <entry key="interactiveMode">
    false
  </entry>
  <!-- A comma-separated list of gameserver endpoints. Upon ticket request, the
    auth-server chooses the most appropriate gameserver endpoint for the
    requesting client from this list and returns it's address to the client. -->
  <entry key="gameServers">
  <!--  sample entries:
    localhost:60004,
    192.168.0.1:12345,
    game.timadorus.org:12345
   -->
   localhost:60004
  </entry>
  <!-- Determines whether session-data between client and gameserver should be
    encrypted. If this is enabled, client and gameserver are issued a
    session-key for symmetric data en- and decryption much like kerberos. If
    this is false, the data between client and gameserver will not be
    encrypted. -->
  <entry key="sessionEncryption">
    true
  </entry>
</properties>
